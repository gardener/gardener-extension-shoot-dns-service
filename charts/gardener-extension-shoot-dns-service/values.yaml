image:
  repository: europe-docker.pkg.dev/gardener-project/public/gardener/extensions/shoot-dns-service
  tag: latest
  pullPolicy: IfNotPresent

serviceName: shoot-dns-service
dnsClass: garden

dnsProviderReplication:
  enabled: false

dnsProviderManagement:
  enabled: true

gardener:
  version: ""
  garden:
    clusterIdentity: garden
  seed:
    identity: ""

leaderElection:
  resourceLock: leases

# settings for metrics, e.g. scraping by seed-prometheus
metrics:
  enableScraping: true
  # default metrics endpoint in controller-runtime
  port: 8080

resources: {}

vpa:
  enabled: true
  resourcePolicy:
    minAllowed:
      memory: 50Mi
  updatePolicy:
    updateMode: "Auto"

controllers:
  lifecycle:
    concurrentSyncs: 5
  healthcheck:
    concurrentSyncs: 5
  heartbeat: 
    renewIntervalSeconds: 30 
  replication:
    concurrentSyncs: 5
  ignoreOperationAnnotation: false

# imageVectorOverwrite: |
#   images:
#   - name: dns-controller-manager
#     sourceRepository: github.com/gardener/external-dns-management
#     repository: europe-docker.pkg.dev/gardener-project/public/dns-controller-manager
#     tag: "0.7.1"

remoteDefaultDomainSecret:
  enabled: false
#  data:
#    NAMESPACE: ...(base64 encoded)
#    OVERRIDE_SERVER_NAME: ...(base64 encoded)
#    REMOTE_ENDPOINT: ...(base64 encoded)
#    ca.crt: LS0tLS1...
#    tls.crt: LS0tLS1...
#    tls.key: LS0tLS1...

dnsControllerManager:
  deploy: true
  image:
    repository: europe-docker.pkg.dev/gardener-project/releases/dns-controller-manager
    tag: "v0.18.2" # marker-for-image-tag-dns-controller-manager (please keep this comment for automated update by set_dependency_version_dnsman)
    pullPolicy: IfNotPresent

  replicaCount: 1

  resources:
    requests:
      cpu: 100m
      memory: 64Mi
    limits:
      memory: 3Gi

  createCRDs: false

  security:
    apparmorEnabled: false
    seccompEnabled: false

  nodeSelector: {}
  tolerations: []
  affinity: {}

  #serviceAccountAnnotations:
  #  annotkey1: annotvalue1
  #  annotkey2: annotvalue2

  ## optionally deploy predefined DNSHostedZonePolicy
  #hostedZonePolicies:
  #  - name: policy1
  #    selector:
  #      domainNames:
  #      - domain.of.my.first.zone.com
  #      - domain.of.my.second.zone.org
  #      #providerTypes:
  #      #- aws-route53
  #      #zoneIDs:
  #      #- z12345
  #    policy:
  #      zoneStateCacheTTL: 2h

  configuration:
    controllers: all
    leaseDuration: 30s
    serverPortHttp: 8080

  additionalConfiguration: []
  env: []
  custom: {}

  remoteaccess:
    enabled: false
  #  service:
  #    annotations:
  #      #dns.gardener.cloud/class: garden
  #      dns.gardener.cloud/dnsnames: my.foo.bar.com
  #      #cert.gardener.cloud/purpose: managed
  #      #cert.gardener.cloud/secretname: remoteaccess-service
  #    type: LoadBalancer
  #  certs:
  #    ca:
  #      cert: LS0t... # CA used for client certs
  #      #key: LS0t... # only needed if remoteaccesscertificates controller is enabled
  #    server:
  #      #secretName: remoteaccess-service # if managed server certificate is used
  #      cert: LS0t... # only needed if certificate is not managed
  #      key: LS0t...  # only needed if certificate is not managed
  #  port: 7777

  vpa:
    enabled: true
    controlledValues: RequestsOnly
    minAllowed:
      memory: 50Mi
    updatePolicy:
      updateMode: "Auto"
